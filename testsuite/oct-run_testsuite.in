#!/usr/bin/env bash
#
# Copyright (C) 2005-2006 Heiko Appel
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
#
# $Id: oct-run_testsuite 2730 2007-02-28 20:57:45Z xavier $


# Paths.
prefix=@prefix@
pkgdatadir=@datadir@/@PACKAGE@
testsuite="$pkgdatadir/testsuite"
# we do not care about this one, but without it we get a warning from configure:
# config.status: WARNING:  'testsuite/oct-run_testsuite.in' seems to ignore the --datarootdir setting
datarootdir=@datarootdir@

# Architecture.
arch=`echo "$MACHTYPE" | awk -F- '{print $1}'`

# Failure reporting.
failed_tests=0
skipped_tests=0
passed_tests=0
total_tests=0
failure_report=""
NUM=0

# Usage.
function usage() {
    cat <<EOF

 Copyright (C) 2005-2006 by Heiko Appel

Usage: oct-run_testsuite [options]
    
     -h            this message
     -n            dry-run mode (show what would be executed)
     -g LIST       comma-separated list of test groups to run
     -q            query testfiles for the given groups (no tests are run)
     -d DIR        directory where to look for the testsuite
     -l            local run
     -e SUFFIX     exec suffix for octopus executable
     -p PREFIX     installation prefix [default: /usr]
     -w            without MPI tests (do not run parallel tests)
     -c            delete all .log files and work directories after the run
     -m ADDRESS    mail report to address

Report bugs to <octopus-devel@tddft.org>.
EOF
 exit 0;
}


# Dry run...
function CMD {
    [ "$dry_run" -o "$verbose" ] && echo -e "$@";
    [ ! "$dry_run" ] && eval "$@";
}


# Find tests to run. Takes as argument the string passed to the
# -g command line option.
function find_tests() {
    groups="$1"
    if [ -n "$groups" ]; then
	groups_pat=`echo "$groups" | sed 's/ *, */|/'`
	groups_pat="^TestGroups *:.*($groups_pat)"
    else # No groups given defaults to all tests.
	groups_pat="."
    fi
    testfiles=`find $testsuite -name "*.test" | \
	xargs @EGREP@ "$groups_pat" | \
	awk -F: '{print $1}' | sort -u`
    echo "$testfiles"
}

function queue {
	OCT_QUEUE="$OCT_QUEUE $1 "
	OUTLIST="$OUTLIST $2 "
	NUM=$(($NUM+1))
}

function inqueue {
  if [ $OCT_TEST_NJOBS -gt 1 ]
  then
    printf "In execution: $OUTLIST\n\n"
  else
    printf "\n"
  fi
}


function checkqueue {
    inqueue
    test_name=`echo $OUTLIST | cut -f 1 -d " "`
    wait `echo $OCT_QUEUE | cut -f 1 -d " "`
    # Look for failed/passed/skipped testcases and add
    # to failure summary.
    failures=$?
    if [ "${failures}" -eq 0 ]; then
	passed_tests=$((passed_tests + 1))
    elif [ ${failures} -eq 255 ]; then
	skipped_tests=$((skipped_tests + 1))
    else
	failed_tests=$((failed_tests + 1))
	name_length=`echo -n $test_name | wc -m`
	space_length=$((60 - name_length))
	spaces=`for((i = 1; i <= space_length; i++)); do echo -n ' '; done`
	failure_report="$failure_report    $test_name$spaces$failures\n"
    fi
    cat `basename $test_name .test`.log
    printf " ************************\n\n"
    if [ $NUM -eq 1 ] ; then
	OCT_QUEUE=""
	OUTLIST=""
    else
	OCT_QUEUE=`echo $OCT_QUEUE | cut -f 2- -d " "`
	OUTLIST=`echo $OUTLIST |cut -f 2- -d " "`
    fi
    NUM=$(($NUM-1))
}

# Run all tests. Takes as first argument a list of testfile names.
function run_testsuite() {

tests="$1"
echo "*****************************"
echo "  Running octopus testsuite  "
echo "*****************************"

# Check for 'preserve working directories' flag.
if [ "$cleanup" == "yes" ]; then
    preserve_opt=""
else
    preserve_opt="-p"
fi

test_index=0

for y in $tests; do
    total_tests=$((total_tests + 1))
    test_name=`echo $y | sed "s|$testsuite/||"`
    ybase=`basename $y .test`
    if [ "${local_run}" == "yes" ]; then
	bin_directory=`pwd`/../src/main
	runtest_directory=$testsuite
    else
	bin_directory=$prefix/bin
	runtest_directory=$bin_directory
    fi
    if [ -n "${exec_suffix}" ]; then
	suffix_opt="-s ${exec_suffix}"
    else
	suffix_opt=""
    fi
    if [ -d "${bin_directory}" ]; then
        test_index=$(($test_index + 1))
	echo Starting test $test_index: $test_name

	CMD $runtest_directory/oct-run_regression_test.pl -l \
	    $preserve_opt $suffix_opt -D $bin_directory -f $y \
	    > ${ybase}.log 2>&1 &
	ppid=$!
	queue $ppid $test_name
	
	if [ $NUM -ge $OCT_TEST_NJOBS ]
	then
	    checkqueue
	fi
    fi
done
while [ $NUM -ge 1 ]
do
    checkqueue
done
}


# Send report via mail.
# Arguments:
# $1 : list of testfile names that have been run,
# $2 : e-mail address to send report to.
function mail_report() {

tests="$1"
datestamp=$(date +"%Y-%m-%d")

for y in $tests; do
    ybase=`basename $y`
    xybase=${ybase%.test}
    failed_tests=$(grep FAIL ${xybase}.log | wc -l) 
    echo "Checking for failed tests: ${xybase}.log"
    if [ $failed_tests -gt 0 ]; then
	echo "Found: $failed_tests"
	echo "Mailing report to: $mailaddr"
	cat oct-header ${xybase}.log ${xybase}.out.log | \
	    mutt -s "[oct-run_testsuite on $arch] daily report - $datestamp" $mailaddr
    fi
done
}

function trap_kill() {
 kill $OCT_QUEUE > /dev/null 2>&1
 echo "Killed"
 exit 1
}

# Show usage info if no args at all.
[ "$#" -eq 0 ] && usage;

# Parse command line.

# Some default settings.
query="no"
send_mail="no"
cleanup="no"
test_groups=""

while getopts "hnlwp:e:m:d:cg:q" opt ; do
    case "$opt" in
        h) usage;;
        n) echo="echo"; dry_run="yes";; 
        p) prefix="$OPTARG"; testsuite=$prefix/share/octopus/testsuite;;
        e) exec_suffix="$OPTARG";;
        l) local_run="yes";;
	g) test_groups="$OPTARG";;
	q) query="yes";;
        w) run_in_parallel="no";;
        m) mailaddr="$OPTARG"; send_mail="yes";;
	d) directory="$OPTARG";;
	c) cleanup="yes";;
        ?) echo "Error parsing arguments"; exit 1;;
    esac
done
shift $[ OPTIND - 1 ]


# Find testfiles.
if [ -n "$directory" ]; then
    testsuite="$directory"
else
    [ "$local_run" == "yes" ] && testsuite=$(pwd)
fi

testfiles=`find_tests "$test_groups"`

# Query mode? If so, list files and exit.
if [ "$query" == "yes" ]; then
    echo "Testfiles for groups $test_groups:"
    echo ""
    for f in $testfiles; do
	echo ${f##$testsuite/}
    done
    exit 0
fi


# No testfiles found, abort.
if [ -z "$testfiles" ]; then
    echo "No testfiles for group(s) $test_groups found."
    # This is also mailed, if -m is present (this is to prevent
    # erroneous cron-jobs and the like).
    if [ "$send_mail" == "yes" ]; then
	datestamp=`date +"%Y-%m-%d"`
	echo "No testfiles for group(s) $test_groups found." | \
	    mutt -s "[oct-run_testsuite on $arch] daily report - $datestamp" $mailaddr
    fi

# Otherwise, start the whole machinery.
else
    # Get epoch seconds at testsuite start.
    testsuite_start=$(date +%s) 

    if [ -z $OCT_TEST_NJOBS ]; then
	OCT_TEST_NJOBS=1
    fi

    # trap signals, so we kill all children before dying
    trap "trap_kill" TERM INT

    # Run testsuite.
    run_testsuite "$testfiles"

    # Failure reporting to STDOUT.
    echo -e "    Passed:  $passed_tests / $total_tests"
    echo -e "    Skipped: $skipped_tests / $total_tests"
    if [ $failed_tests -gt 0 ]; then
	echo "    Failed:  $failed_tests / $total_tests"
	echo
	echo "    testfile                                                    # failed testcases"
	echo "    ------------------------------------------------------------------------------"
	echo -e "$failure_report"
    else
	if [ $passed_tests -gt 0 ]; then
	  echo -e "\nEverything seems to be OK"
	else
	  echo -e "\nAll tests were skipped."
	  # make sure a failure will be reported by the exit status
	  failed_tests=100
	fi
    fi
    echo


    # Get epoch seconds after we are done and compute time difference.
    testsuite_end=$(date +%s)
    timediff_sec=$[ testsuite_end - testsuite_start ]

    rm -rf oct-header
    RUNTIME="Total run-time of the testsuite: \
    $(printf '%02d:%02d:%02d' $[timediff_sec / 3600] \
    $[(timediff_sec % 3600) / 60 ] $[timediff_sec % 60])"

    # Save runtime for mail header.
    echo $RUNTIME > oct-header
    echo "" >> oct-header

    # And print also to the screen.
    echo $RUNTIME
    echo ""

        
    # Should we send a mail report?
    [ "${send_mail}" == "yes" ] && mail_report "$testfiles" "$mailaddr"


    # Clean up.
    [ "$cleanup" == "yes" ] && rm -f *.log oct-header stamp build-stamp
fi

exit $failed_tests


# Local Variables:
# mode: shell-script
# coding: utf-8
# End:
